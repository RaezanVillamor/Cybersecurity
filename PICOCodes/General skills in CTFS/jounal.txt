August 17:
-journal creation

August 18
-N/A

August 19
-Reading book 1 General skills

August 20:
-did pico "Super SSH"
- did pico "Bases"
-Did pico "Insp3ct0r"
-did pico "where are the robots

did pw crack 1,2,3,4,5
-----------
Super SSH Description
Using a Secure Shell (SSH) is going to be pretty important.
Can you ssh as ctf-player to titan.picoctf.net at port 54430 to get the flag?
You'll also need the password 1db87a14. If asked, accept the fingerprint with yes.
If your device doesn't have a shell, you can use: https://webshell.picoctf.org
If you're not sure what a shell is, check out our Primer: https://primer.picoctf.com/#_the_shell


Solution

raev-picoctf@webshell:~$ ssh ctf-player@titan.picoctf.net -p 60710
The authenticity of host '[titan.picoctf.net]:60710 ([3.139.174.234]:60710)' can't be established.
ED25519 key fingerprint is SHA256:4S9EbTSSRZm32I+cdM5TyzthpQryv5kudRP9PIKT7XQ.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[titan.picoctf.net]:60710' (ED25519) to the list of known hosts.
ctf-player@titan.picoctf.net's password: 
Welcome ctf-player, here's your flag: picoCTF{s3cur3_c0nn3ct10n_45a48857}
Connection to titan.picoctf.net closed.
raev-picoctf@webshell:~$ 
--------------------

Description Bases
What does this bDNhcm5fdGgzX3IwcDM1 mean? I think it has something to do with bases.

Solution: used cyberchef

---------------------


Insp3ct0r
Author: zaratec/danny

Description
Kishor Balan tipped us off that the following code may need 
inspection: https://jupiter.challenges.picoctf.org/problem/9670/ (link) or http://jupiter.challenges.picoctf.org:9670

Solution: used inspect element to find pieces of the flag. 
One was in html comments, one was in the css, one was in the js script

---------------------

where are the robots
Author: zaratec/Danny

Description
Can you find the robots? https://jupiter.challenges.picoctf.org/problem/56830/ (link) or http://jupiter.challenges.picoctf.org:56830

Hint:
What part of the website could tell you where the creator doesn't want you to look?

Solution:
A robots.txt file tells search engine crawlers which URLs the crawler can access on your site. 
This is used mainly to avoid overloading your site with requests; it is not a mechanism for keeping a web page out of Google. 
To keep a web page out of Google, block indexing with noindex or password-protect the page.

-add "robots.txt" to the end of the html link which will take you to a page that has a different ending html link

------------------------------


PW CRACK 1

solution: if you look at the python files the password is in the if statement

-----------------------------

PW crack 2

Solution: in the if statement the pw is in the if statement but in hexadecimals

---------------------------------

PW crack 3

solution: brute force

--------------------------

PW crack 4

solution: for loop brute force
---------------------------

PW crack 5

brute force but in the library. also used grep for the output tho !

python3 level5.py | grep 'pico'

------------------------------

August 21:

-Started section 5 of pico

-----------------------------

August 22:

- worked on low level binary problems

-Started on "mochis tale" --> Finished mochis tale

-------------------------------

ASCII Numbers

Description
Convert the following string of ASCII numbers into a readable string:
0x70 0x69 0x63 0x6f 0x43 0x54 0x46 0x7b 0x34 0x35 0x63 0x31 0x31 0x5f 0x6e 0x30 0x5f 0x71 
0x75 0x33 0x35 0x37 0x31 0x30 0x6e 0x35 0x5f 0x31 0x6c 0x6c 0x5f 0x74 0x33 0x31 0x31 0x5f 
0x79 0x33 0x5f 0x6e 0x30 0x5f 0x6c 0x31 0x33 0x35 0x5f 0x34 0x34 0x35 0x64 0x34 0x31 0x38 0x30 0x7d


solution: cyberchef


--------------------------------

Picker 1

This service can provide you with a random number, but can it do anything else?
Connect to the program with netcat:
$ nc saturn.picoctf.net 61475
The program's source code can be downloaded here.

Solution: run the source code but run the "win()" function, itll give you a hex code which you can put into cyberchef

---------------------------------

Bit-O-Asm-1
Author: LT 'syreal' Jones

Description
Can you figure out what is in the eax register? Put your answer in the picoCTF flag format: picoCTF{n} where n is the contents of the eax register in the decimal number base. If the answer was 0x11 your flag would be picoCTF{17}.
Download the assembly dump here. (Down below is whats given inside the text file)

<+0>:     endbr64 
<+4>:     push   rbp
<+5>:     mov    rbp,rsp
<+8>:     mov    DWORD PTR [rbp-0x4],edi
<+11>:    mov    QWORD PTR [rbp-0x10],rsi
<+15>:    mov    eax,0x30
<+20>:    pop    rbp
<+21>:    ret

Solution: Right beside eax it has 0x30, deciphering that the flag it gives is picoCTF{48}  0x30 base 10 is 48


-----------------------------------------------

Bit-O-Asm-2
Author: LT 'syreal' Jones

Description
Can you figure out what is in the eax register? Put your answer in the picoCTF flag format: picoCTF{n} 
where n is the contents of the eax register in the decimal number base. If the answer was 0x11 your flag would be picoCTF{17}.
Download the assembly dump here.

<+0>:     endbr64 
<+4>:     push   rbp
<+5>:     mov    rbp,rsp
<+8>:     mov    DWORD PTR [rbp-0x14],edi
<+11>:    mov    QWORD PTR [rbp-0x20],rsi
<+15>:    mov    DWORD PTR [rbp-0x4],0x9fe1a
<+22>:    mov    eax,DWORD PTR [rbp-0x4]
<+25>:    pop    rbp
<+26>:    ret

Solution: the ptr is 0x9fe1a so deciphering that we get 654874

--------------------------
August 23: 

****Notes: Focus on binary exploitation later Bit-O-ASM-3 be postponed until after cryptography

---------------------------
Bit-O-Asm-3
Author: LT 'syreal' Jones

Description
Can you figure out what is in the eax register? Put your answer in the picoCTF flag format: picoCTF{n} 
where n is the contents of the eax register in the decimal number base. If the answer was 0x11 your flag would be picoCTF{17}.
Download the assembly dump here.

<+0>:     endbr64 
<+4>:     push   rbp
<+5>:     mov    rbp,rsp
<+8>:     mov    DWORD PTR [rbp-0x14],edi
<+11>:    mov    QWORD PTR [rbp-0x20],rsi
<+15>:    mov    DWORD PTR [rbp-0xc],0x9fe1a
<+22>:    mov    DWORD PTR [rbp-0x8],0x4
<+29>:    mov    eax,DWORD PTR [rbp-0xc]
<+32>:    imul   eax,DWORD PTR [rbp-0x8]
<+36>:    add    eax,0x1f5
<+41>:    mov    DWORD PTR [rbp-0x4],eax
<+44>:    mov    eax,DWORD PTR [rbp-0x4]
<+47>:    pop    rbp
<+48>:    ret

Assembly Arithmetic
Arithmetic in assembly is a little different. Both operands are used in the operation, as expected, but the result of the operation is stored in the first operand,
wiping away its original contents.
The next problem introduces the imul and add instructions. imul is multiplication, the operands are multiplied together and the 
result is stored in the first operand. add is addition, the operands are added together and the result is stored in the first operand.

****Unfinished
-----------------------------------------
August 24: 

Participated in Cybgenix CTF online
---------------
August 25 - Sept 2

-Vacation
 ------------------
 Sept 3

 - Practiced cryptography
 

 caesar
Author: Sanjay C/Daniel Tunitis

Description
Decrypt this message.

Caesar Ciphers Explanation
A Caesar cipher is a simple encryption technique that operates by shifting letters within the alphabet. Here’s how it works:

If the shift is 1 then “a” becomes “b”, “b” becomes “c”, and so on.
At the end of the alphabet, “z” wraps around to become “a”.
The magnitude of the shift is the key.
Since the letters wrap around, there are only so many shifts that one can do within the alphabet. The Caesar Cipher has only 25 possible keys.
While manually applying each possible shift to a message (brute-forcing) would take a while, computationally, it can be done in less than a second. This greatly simplifies the cryptanalysis to just evaluating each decrypted result.

For more information and code examples, you can explore our CTF Primer, Substitution Ciphers chapter.

--------------------------------
Base64 Explanation
Base64 encoding allows raw binary data to be represented as printable ASCII characters. It’s not an encryption method, it can always be easily decoded. 
It can serve as a mild form of obfuscation. CTF (Capture-the-flag) problem writers often use this feature of Base64 to hide otherwise trivially discoverable 
flags, such as when using grep to search for the “picoCTF” flag prefix. Base64 encoded information can be given away by trailing equal signs (“=”), but Base64 
encoded strings don’t always have this feature. A good tool for encoding and decoding Base64 (and many other things) is CyberChef.


interencdec
Author: NGIRIMANA Schadrack

Description
Can you get the real meaning from this file.
Download the file here.


the file reads:
YidkM0JxZGtwQlRYdHFhR3g2YUhsZmF6TnFlVGwzWVROclgyeG9OakJzTURCcGZRPT0nCg==

decoding from base64 leads to:
b'd3BqdkpBTXtqaGx6aHlfazNqeTl3YTNrX20wMjEyNzU4fQ=='

getting rid of the b since it looks like its not needed which gives:
wpjvJAM{jhlzhy_k3jy9wa3k_m0212758}

using a caesar cipher gives:
picoCTF{caesar_d3cr9pt3d_ea60e00b}

------------------------------------
New Caesar
Author: madStacks

Description
We found a brand new type of encryption, can you break the secret code? (Wrap with picoCTF{}) dcebcmebecamcmanaedbacdaanafagapdaaoabaaafdbapdpaaapadanandcafaadbdaapdpandcac new_caesar.py




-----------------------
Sept 4:
--------
Sept 5:

----------
Sept 10

---------
Sept 14